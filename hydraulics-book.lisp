(in-package :system-solver)
(defmacro with-asked-parameters (paramlist &rest body)
  `(let ,(loop for p in paramlist
	     collect (if (listp p)
			 `(,(first p) (progn (print ,(second p))
					     (make-instance 'parameter :value (or (eval (read)) ,(third p)) :name ,(symbol-name (first p)))))
			 `(,p (progn (print ,(symbol-name p))
				     (make-instance 'parameter :value (eval (read)) ,(symbol-name p))))))
     ,@body))


;; Find pressure at summit of siphon
(defun siphon ()
  (let ((pipe1 (make-instance 'pipe :z1 9 :z2 11.5 :l 5 :d 0.1 :f 0.08 :k .5 :p1 100 :name "pipe1"))
	(pipe2 (make-instance 'pipe :l 10 :d 0.1 :f 0.08 :k 1 :z2 5 :p2 100 :name "pipe2"))
	system)
    (connect-pipes (list pipe1 pipe2) (list t nil))
    (setf system (solve-for (list (slot-value pipe1 'vel)
				  (slot-value pipe1 'p2))))
    (let ((vapour-pressure 2.5))
      (when (< (value (slot-value pipe1 'p2)) vapour-pressure)
	(print "Minimum pressure (at summit) is less than vapour-pressure")))
    system))

;; Determination of various parameters for Normal Depth
(define-relation mannings-equation
    :parameters (q a 1/n p s0)
    :implicit (- q
		 (* 1/n a (expt (/ a p) 2/3) (sqrt s0))))

(defun trapezoidal-section ()
  (print "Enter parameters for trapezoidal-section (enter nil for unknown parameters)")
  (with-asked-parameters ((q "Discharge")
			  (y "Normal Depth")
			  (z "Side slope")
			  (b "Bottom width")
			  (n "Manning's n")
			  (s "Longitudinal slope"))
    (with-parameters (a p 1/n)
      (satisfying-relations (inverse :a n :1/a 1/n)
			    (lambda (a b y z)
			      (- a (* (+ b (* 2 y z)) y)))
			    (lambda (p b y z)
			      (- p (+ b (* 2 y (sqrt (1+ (* z z)))))))
			    (mannings-equation :s0 s :q q :1/n 1/n :a a :p p))
      (solve-for (list q y z b n s)))))

;; Three reservoir problem
(defun calculate-r (f l d)
  (* 8 f l (/ (* (expt pi 2) 9.81 (expt d 5)))))

(defun three-reservoir-problem ()
  (print "Enter data for three-reservoir problem (enter nil for unknown parameters or for default value)")
  (with-asked-parameters ((z1 "Head at reservoir 1")
			  (z2 "Head at reservoir 2")
			  (z3 "Head at reservoir 3")
			  (r1 "Resistance coeff for pipe 1" 15939)
			  (r2 "Resistance coeff for pipe 2" 83565)
			  (r3 "Resistance coeff for pipe 3" 170044)
			  (q1 "Discharge in pipe 1 (+ve if towards junction)")
			  (q2 "Discharge in pipe 2")
			  (q3 "Discharge in pipe 3"))
  (let* ((pipe1 (make-instance 'pipe :name "pipe1" :r r1 :p1 0 :p2 0 :z1 z1 :q q1))
	 (pipe2 (make-instance 'pipe :name "pipe2" :r r2 :p1 0 :z1 z2 :q q2))
	 (pipe3 (make-instance 'pipe :name "pipe3" :r r3 :p1 0 :z1 z3 :q q3)))
    (connect-pipes (list pipe1 pipe2 pipe3) (list t t t))
    (solve-for (list z1 z2 z3 r1 r2 r3 q1 q2 q3 (slot-value pipe1 'z2))))))

;; Pipe network
;; For qn practised in class
(defun pipe-network ()
  (let* ((1a (make-instance 'pipe :name "1A" :z1 0 :z2 0 :r 0 :q 100 :p1 0))
	 (ab (make-instance 'pipe :name "AB" :z1 0 :z2 0 :r 1))
	 (b2 (make-instance 'pipe :name "B2" :z1 0 :z2 0 :r 0 :q 25))
	 (bc (make-instance 'pipe :name "BC" :z1 0 :z2 0 :r 3))
	 (bd (make-instance 'pipe :name "BD" :z1 0 :z2 0 :r 2))
	 (ac (make-instance 'pipe :name "AC" :z1 0 :z2 0 :r 2))
	 (cd (make-instance 'pipe :name "CD" :z1 0 :z2 0 :r 1))
	 (d3 (make-instance 'pipe :name "D3" :z1 0 :z2 0 :r 0 :q 75)))
    (connect-pipes (list 1a ab ac) '(t nil nil))
    (connect-pipes (list ab bd bc b2) '(t nil nil nil))
    (connect-pipes (list bd cd d3) '(t t nil))
    (connect-pipes (list ac bc cd) '(t t nil))
    
    (solve-for (list (slot-value cd 'q)
		     (slot-value bc 'hf)))))

;; All pipe flow problems
(defun pipe-problem ()
  (with-asked-parameters ((vel "Velocity")
			  (d "Diameter")
			  (e "Roughness")
			  (nu "Kinematic Viscosity (default 10^-6)" 1e-6)
			  (f "Friction factor")
			  (Re "Reynolds Number"))
    (make-instance 'pipe :vel vel :d d :e e :nu nu :f f :Re re)
    (solve-for (list vel d e f Re))))
